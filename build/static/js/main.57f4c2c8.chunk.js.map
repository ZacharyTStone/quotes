{"version":3,"sources":["Components/RandomQuote.js","Components/Button.js","Components/TextPanel.js","Components/Title.js","App.js","index.js"],"names":["RandomQuote","props","className","quote","Button","changeButtonColor","trueOrFalse","setButtonColor","setTimeout","useState","buttonColor","style","backgroundColor","onClick","testAuthor","author","realAuthor","console","log","letter","TextPanel","displayQuote","allAuthors","map","index","Title","App","quotes","setQuotes","currentQuote","setCurrentQuote","currentAuthor","setCurrentAuthor","showQuote","setShowQuote","setAllAuthors","useEffect","fetchQuotes","a","axios","result","data","random","Math","floor","text","sort","replaceNull","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAUeA,EARK,SAACC,GACnB,OACE,qBAAKC,UAAU,eAAf,SACE,oBAAGA,UAAU,oBAAb,cAAmCD,EAAME,MAAzC,UCuCSC,EA1CA,SAACH,GAKd,SAASI,EAAkBC,GACrBA,GACFC,EAAe,SACfC,YAAW,WACTD,EAAe,WACd,OAEHA,EAAe,WACfC,YAAW,WACTD,EAAe,WACd,MAKP,MAAsCE,mBAAS,SAA/C,mBAAOC,EAAP,KAAoBH,EAApB,KAeA,OACE,wBAAQI,MAAO,CAAEC,gBAAiBF,GAAeG,QAnCnD,WACE,OAqBkCC,EArBAb,EAAMc,OAqBMC,EArBEf,EAAMe,WAsBlDF,IAAeE,GACjBC,QAAQC,IAAI,WACZb,GAAkB,IACX,IAEPY,QAAQC,IAAI,aACZb,GAAkB,IACX,GARX,IAAoCS,EAAYE,GAa9C,mBACMf,EAAMkB,OADZ,aACuBlB,EAAMc,WCTlBK,EAzBG,SAACnB,GACjB,OAAIA,EAAMoB,aAEN,sBAAKnB,UAAU,aAAf,UACE,cAAC,EAAD,CAAaa,OAAQd,EAAMc,OAAQZ,MAAOF,EAAME,QAChD,qBAAKD,UAAU,eAAf,SACGD,EAAMqB,WAAWC,KAAI,SAACR,EAAQS,GAAT,OACpB,cAAC,EAAD,CAEEd,YAAaT,EAAMS,YACnBK,OAAQA,EACRC,WAAYf,EAAMc,OAClBI,OAAQlB,EAAMkB,OAAOK,IAJhBA,WAYb,qBAAKtB,UAAU,aAAf,SACE,cAAC,EAAD,CAAaa,OAAQd,EAAMc,OAAQZ,MAAOF,EAAME,WCpBzCsB,G,MAJD,WACZ,OAAO,oBAAIvB,UAAU,QAAd,gDC2EMwB,MAxEf,WAGE,MAA4BjB,mBAAS,IAArC,mBAAOkB,EAAP,KAAeC,EAAf,KACA,EAAwCnB,mBAAS,IAAjD,mBAAOoB,EAAP,KAAqBC,EAArB,KACA,EAA0CrB,mBAAS,IAAnD,mBAAOsB,EAAP,KAAsBC,EAAtB,KAGA,EAAkCvB,oBAAS,GAA3C,mBAAOwB,EAAP,KAAkBC,EAAlB,KAGA,EAAkCzB,mBAAS,IAA3C,mBAAKa,EAAL,KAAiBa,EAAjB,KAoBA,OATAC,qBAAU,WACR,IAAMC,EAAW,uCAAG,4BAAAC,EAAA,sEACGC,IAAM,+BADT,OACZC,EADY,OAElBZ,EAAUY,EAAOC,MAFC,2CAAH,qDAKjBJ,MACC,IAGD,sBAAKnC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CACEmB,aAAcY,EACdX,WAAYA,EAEZnB,MAAO8B,EAAYJ,EAAe,8BAClCd,OAAQkB,EAAYF,EAAgB,MACpCZ,OAAQ,CAAC,IAAK,IAAK,IAAK,OAE1B,8BACE,wBACEN,QAAS,WACP,IAAI6B,EAASC,KAAKC,MAAsB,KAAhBD,KAAKD,UAC7BR,GAAa,GAEbJ,EAAgBH,EAAOe,GAAQG,MAC/Bb,EAAiBL,EAAOe,GAAQ3B,QAEhCoB,EACE,CACER,EAAOgB,KAAKC,MAAsB,KAAhBD,KAAKD,WAAkB3B,OACzCY,EAAOgB,KAAKC,MAAsB,KAAhBD,KAAKD,WAAkB3B,OACzCY,EAAOgB,KAAKC,MAAsB,KAAhBD,KAAKD,WAAkB3B,OACzCY,EAAOe,GAAQ3B,QAEd+B,MAAK,kBAAMH,KAAKD,SAAW,MAC3BnB,KAAI,SAACR,GACJ,OA9CI,SAACA,EAAQC,GAC3B,OAAe,OAAXD,EACK,UAEAA,EA0CYgC,CAAYhC,EAAQY,EAAOe,GAAQ3B,aAjBpD,oCC5CRiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.57f4c2c8.chunk.js","sourcesContent":["import \"./RandomQuote.css\";\n\nconst RandomQuote = (props) => {\n  return (\n    <div className=\"random-quote\">\n      <p className=\"random-quote-text\">\"{props.quote}\"</p>\n    </div>\n  );\n};\n\nexport default RandomQuote;\n","import { useState } from \"react\";\n\nconst Button = (props) => {\n  function clickHandler() {\n    return checkIfButtonValueIsAuthor(props.author, props.realAuthor);\n  }\n\n  function changeButtonColor(trueOrFalse) {\n    if (trueOrFalse) {\n      setButtonColor(\"green\");\n      setTimeout(() => {\n        setButtonColor(\"black\");\n      }, 200);\n    } else {\n      setButtonColor(\"#ff0000\");\n      setTimeout(() => {\n        setButtonColor(\"black\");\n      }, 200);\n    }\n  }\n\n  //   button values\n  const [buttonColor, setButtonColor] = useState(\"black\");\n\n  // check if button clicked is correct\n  function checkIfButtonValueIsAuthor(testAuthor, realAuthor) {\n    if (testAuthor === realAuthor) {\n      console.log(\"correct\");\n      changeButtonColor(true);\n      return true;\n    } else {\n      console.log(\"incorrect\");\n      changeButtonColor(false);\n      return false;\n    }\n  }\n\n  return (\n    <button style={{ backgroundColor: buttonColor }} onClick={clickHandler}>\n      {`${props.letter}: ${props.author}`}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport \"./TextPanel.css\";\nimport RandomQuote from \"./RandomQuote\";\nimport Button from \"./Button.js\";\n\nconst TextPanel = (props) => {\n  if (props.displayQuote) {\n    return (\n      <div className=\"text-panel\">\n        <RandomQuote author={props.author} quote={props.quote} />\n        <div className=\"button-panel\">\n          {props.allAuthors.map((author, index) => (\n            <Button\n              key={index}\n              buttonColor={props.buttonColor}\n              author={author}\n              realAuthor={props.author}\n              letter={props.letter[index]}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  } else\n    return (\n      <div className=\"text-panel\">\n        <RandomQuote author={props.author} quote={props.quote} />\n      </div>\n    );\n};\nexport default TextPanel;\n","import \"./Title.css\";\n\nconst Title = () => {\n  return <h1 className=\"title\">Guess Who said this famous quote</h1>;\n};\n\nexport default Title;\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport TextPanel from \"./Components/TextPanel\";\nimport Title from \"./Components/Title\";\n\nfunction App() {\n  // set up quotes araay and set displayed quote\n\n  const [quotes, setQuotes] = useState({});\n  const [currentQuote, setCurrentQuote] = useState(\"\");\n  const [currentAuthor, setCurrentAuthor] = useState(\"\");\n\n  // ths to be used to show the quote once the user starts the app\n  const [showQuote, setShowQuote] = useState(false);\n\n  // array of authors to be set as the correct author and 3 random authors then randomized\n  let [allAuthors, setAllAuthors] = useState([]);\n\n  // function to replace null and identical authors with \"Unknown\"\n  const replaceNull = (author, realAuthor) => {\n    if (author === null) {\n      return \"Unknown\";\n    } else {\n      return author;\n    }\n  };\n  // get the quotes from the api\n  useEffect(() => {\n    const fetchQuotes = async () => {\n      const result = await axios(`https://type.fit/api/quotes`);\n      setQuotes(result.data);\n    };\n\n    fetchQuotes();\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Title />\n      <TextPanel\n        displayQuote={showQuote}\n        allAuthors={allAuthors}\n        // if the main button is clicked show the quote\n        quote={showQuote ? currentQuote : \"Click to see a random quote\"}\n        author={showQuote ? currentAuthor : \"N/A\"}\n        letter={[\"A\", \"B\", \"C\", \"D\"]}\n      />\n      <div>\n        <button\n          onClick={() => {\n            let random = Math.floor(Math.random() * 1643);\n            setShowQuote(true);\n            // setting the current quote and author\n            setCurrentQuote(quotes[random].text);\n            setCurrentAuthor(quotes[random].author);\n            // setting the all authors array, randmomizing the authors, and setting the final authors array to pass down\n            setAllAuthors(\n              [\n                quotes[Math.floor(Math.random() * 1643)].author,\n                quotes[Math.floor(Math.random() * 1643)].author,\n                quotes[Math.floor(Math.random() * 1643)].author,\n                quotes[random].author,\n              ]\n                .sort(() => Math.random() - 0.5)\n                .map((author) => {\n                  return replaceNull(author, quotes[random].author);\n                })\n            );\n          }}\n        >\n          New Random Quote\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}